
//Ouput: runtimes for search and input
//Do Tree data structure

import java.util.Scanner;

public class FinalProject {

	// dictionary
	final static String[] dictionary = { "an", "as", "at", "be", "by", "do", "go", "he", "if", "in", "is", "it", "my",
			"no", "of", "on", "or", "so", "to", "up", "we", "all", "and", "are", "but", "can", "day", "did", "for",
			"had", "has", "her", "him", "his", "hot", "how", "may", "now", "one", "out", "see", "she", "the", "two",
			"use", "was", "way", "who", "you", "been", "call", "come", "down", "each", "from", "have", "know", "like",
			"long", "look", "make", "many", "more", "most", "over", "said", "side", "some", "than", "that", "them",
			"then", "they", "this", "time", "what", "when", "were", "will", "with", "word", "your", "about", "could",
			"first", "other", "sound", "their", "there", "these", "thing", "water", "which", "would", "write", "number",
			"people" };

	// all fields
	private static int tableSize = 97;
	private int numWords = 0;
	private static String[] table = new String[tableSize];

	/*
	 * 
	 * SIMPLE ARRAY IMPLEMENTING DICTIONARY
	 * 
	 */
	private static boolean isWord(String word) {
		for (int i = 0; i < dictionary.length; i++) {
			if (word.compareTo(dictionary[i]) == 0) {
				System.out.println(word);
				return true;
			}
		}
		return false;
	}

	/*
	 * 
	 * HASHTABLE IMPLEMENTING DICTIONARY
	 * 
	 */

	// function to obtain hashKey
	public static int hash(String s) {
		int tempValue = 0;
		for (int i = 0; i < s.length(); i++)
			tempValue = tempValue + (s.charAt(i) - 'a');
		int hashKey = tempValue % tableSize;
		return hashKey;
	}

	// insert a record into the hashtable
	public void insert(String s) {
		int hashKey = hash(s);
		while (table[hashKey] != null)
			hashKey = hashKey++;
		table[hashKey] = s;
		numWords++;
	}

	// return number of words in the hashtable
	public int numberOfWords() {
		return numWords;
	}

	// search for a record
	public static String search(String myWord) {
		// compute the hash value of the given word
		int hashKey = hash(myWord);
		//System.out.println("Value of table at a certain hashKey: " + table[hashKey] + " Hashkey " + hashKey);
		while (myWord != table[hashKey] && table[hashKey] != null) {
			System.out.println("Are we here?");
			if (hashKey > table.length)
				hashKey = hashKey - table.length;
			hashKey = hashKey++;
		}
		//System.out.println("Maybe we here");
		if (myWord == table [hashKey]) {
			System.out.println("You have the following results matching: " + table[hashKey]);
			return table[hashKey];
		} else
			return null;
	}

	/*
	 * 
	 * ALGORITHM TO SCRAMBLE WORDS
	 * 
	 */
	public void rearrange(String s) {
		rearrange("", s);
	}

	private static void rearrange(String prefix, String s) {
		isWord(prefix);
		search(prefix);
		if (s.length() != 0) {
			for (int i = 0; i < s.length(); i++) {
				String sub = s.substring(0, i) + s.substring(i + 1, s.length());
				rearrange(prefix + s.charAt(i), s.substring(0, i) + s.substring(i + 1, s.length()));
			}
		}
	}

	/*
	 * 
	 * MAIN METHOD
	 * 
	 */
	public static void main(String[] args) {

		// new instance of the final project
		FinalProject a = new FinalProject();

		// propmts user for a string to scramble
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter your letters as a string without spaces in it: ");
		String s = scan.next();

		// loop to insert dictionary into the string array

		// loop to insert dictionary into the hash table

		// calle rearrange for prompted string by user
		a.rearrange(s);
	}
}
