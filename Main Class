import java.util.Scanner;
import java.io.*;

public class FinalProject {

 // all fields
 private static int tableSize = 1997;
 private static int numWords = 0;
 private static String[] table = new String[tableSize];
 
 
 private static String fileName = "Dictionary.txt";
 private static String[] dictionary = new String[1000];
 private static String ln = null;


 /*
  * 
  * HASHTABLE IMPLEMENTING DICTIONARY
  * 
  */
 // function to obtain hashKey
 public static int insert(String s) {
  int tempValue = 0;
  for (int i = 0; i < s.length(); i++)
   tempValue = tempValue + (s.charAt(i) - 'a');
  int hashKey = tempValue % tableSize;
  while (table[hashKey] != null) {
     hashKey++;
     hashKey = hashKey % tableSize;
  }
  table[hashKey] = s;
  numWords++;
  //System.out.println(table[hashKey]);
  return hashKey; 
 }
 
 
 
  public static int hashInput(String s) {
    int tempValue = 0;
    for (int i = 0; i < s.length(); i++)
      tempValue = tempValue + (s.charAt(i) - 'a');
    int hashKey = (tempValue + (s.length() % 7)) % tableSize;
    return hashKey; 
 }
  
 // return number of words in the hashtable
 public int numberOfWords() {
  return numWords;
 }

 // search for a record
 public static String search(String myWord) {
  // compute the hash value of the given word
  int hashKey = hashInput(myWord);
  System.out.println(table[hashKey]);
  int tempKey = hashKey;
  int i = 0;
  
  if (myWord != table[tempKey]) {
    //System.out.println(table[tempKey]);
    while (i < tableSize && myWord != table[tempKey]) {
      tempKey++;
      i++;
      if (tempKey >= tableSize) {
        tempKey -= tableSize; 
      }
    }
  }
  
  if (myWord != table[tempKey])
    return null;
  else
    return table[tempKey];
 }

 /*
  * 
  * ALGORITHM TO SCRAMBLE WORDS
  * 
  */
 public void rearrange(String s) {
  rearrange("", s);
 }

 private static void rearrange(String prefix, String s) {
  if (search(prefix) != null) 
    System.out.println(search(prefix));
  if (s.length() != 0) {
   for (int i = 0; i < s.length(); i++) {
    String sub = s.substring(0, i) + s.substring(i + 1, s.length());
    rearrange(prefix + s.charAt(i), s.substring(0, i) + s.substring(i + 1, s.length()));
   }
  }
 }
 
 private static void readDictionary() {
   
   try {
    FileReader filereader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(filereader);
    int i = 0;
    while((ln = bufferedReader.readLine()) != null) {
      dictionary[i] = ln;
      insert(ln);
      i++;  
    }
    bufferedReader.close();
  }
  catch(FileNotFoundException ex) {
    System.out.println("Unable to open file '" + fileName + "'");                
  }
  catch(IOException ex) {
    System.out.println("Error reading file '" + fileName + "'");                  
  }
  
 }

 /*
  * 
  * MAIN METHOD
  * 
  */
 public static void main(String[] args) {

  // new instance of the final project
  FinalProject a = new FinalProject();

  // propmts user for a string to scramble
  Scanner scan = new Scanner(System.in);
  System.out.println("Enter your letters as a string without spaces in it: ");
  String s = scan.next();

  a.readDictionary();
  
  
  // loop to insert dictionary into the string array
  

  // loop to insert dictionary into the hash table

  // calle rearrange for prompted string by user
  a.rearrange(s);
 }
}
